import React from 'react';

export default function App() {
return <div>App</div>;
}

  -------------------

// src/components/Crib/Crib.tsx

import React, { useState } from 'react';
import styles from './Crib.module.css';
import { Card as CardType } from 'card-games-typescript'; // Adjust based on your card handling setup

interface CribProps {
  onNextStep: () => void;
  onSetCrib: (cribCards: CardType[]) => void;
  playerHand: CardType[]; // Add this prop to accept the player's hand
}

const Crib: React.FC<CribProps> = ({ onNextStep, onSetCrib, playerHand }) => {
  const [selectedCards, setSelectedCards] = useState<CardType[]>([]);

  const toggleCardSelection = (card: CardType) => {
    const isSelected = selectedCards.some(c => c.rank === card.rank && c.suite === card.suite);
    if (isSelected) {
      setSelectedCards(current => current.filter(c => c.rank !== card.rank || c.suite !== card.suite));
    } else if (selectedCards.length < 4) {
      setSelectedCards(current => [...current, card]);
    }
  };

  const submitCrib = () => {
    if (selectedCards.length === 4) {
      onSetCrib(selectedCards);
      onNextStep();
    } else {
      alert('Please select exactly 4 cards for the crib.');
    }
  };

  // Use the player's hand for displaying card options
  return (
    <div className={styles.container}>
      <h2 className={styles.title}>Select Cards for the Crib</h2>
      <div className={styles.cardSelection}>
        {playerHand.map((card, index) => (
          <div key={index} className={`${styles.cardOption} ${selectedCards.includes(card) ? styles.selected : ''}`} onClick={() => toggleCardSelection(card)}>
            {card.rank} of {card.suite}
          </div>
        ))}
      </div>
      <button className={styles.submitButton} onClick={submitCrib}>Submit Crib</button>
    </div>
  );
};

export default Crib;

  -------------------

// src/components/DrawCard/DrawCard.tsx

import React, { useState } from 'react';
import styles from './DrawCard.module.css';
import { Card as CardType, Deck } from 'card-games-typescript'; // Ensure the library is installed and imported correctly

interface DrawCardProps {
  onNextStep: () => void;
  onSetStarter: (card: CardType) => void;
}

const DrawCard: React.FC<DrawCardProps> = ({ onNextStep, onSetStarter }) => {
  const [selectedCard, setSelectedCard] = useState<CardType | null>(null);
  const [deck] = useState<Deck>(new Deck()); // Assuming deck is initialized here; adjust based on actual app structure

  // Function to handle selecting a card as the starter
  const selectStarter = (card: CardType) => {
    setSelectedCard(card);
  };

  // Function to handle submitting the selected starter card
  const submitStarter = () => {
    if (selectedCard) {
      onSetStarter(selectedCard);
      onNextStep();
    } else {
      alert('Please select a starter card.');
    }
  };

  // Assuming the deck is shuffled and ready to use
  // Display only a subset of the deck for the starter card selection for demonstration purposes
  const displayCards = deck.cards.slice(0, 5); // Adjust based on your game logic

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>Select the Draw Card</h2>
      <div className={styles.cardSelection}>
        {displayCards.map((card, index) => (
          <div key={index} onClick={() => selectStarter(card)} className={`${styles.cardOption} ${selectedCard === card ? styles.selected : ''}`}>
            {card.rank} of {card.suit}
          </div>
        ))}
      </div>
      <button onClick={submitStarter} className={styles.submitButton}>Submit Draw Card</button>
    </div>
  );
};

export default DrawCard;

  -------------------

// src/components/HomePage/HomePage.tsx

import React from 'react';

interface HomePageProps {
  onNextStep: () => void; // Function to navigate to the next step in the application flow
}

const HomePage: React.FC<HomePageProps> = ({ onNextStep }) => {
  return (
    <div className="container text-center">
      <h1 className="mb-20">Welcome to the Cribbage Scoring App</h1>
      <p className="mb-20">This app will guide you through scoring a hand in cribbage.</p>
      <button onClick={onNextStep} className="mt-20">Start Scoring</button>
    </div>
  );
};

export default HomePage;

  -------------------

// src/components/PlayerHand/PlayerHand.tsx

import React, { useState, useEffect } from 'react';
import styles from './PlayerHand.module.css';
import { Deck } from 'card-games-typescript';

interface PlayerHandProps {
  onNextStep: () => void;
  onSetHand: (selectedHand: Deck.Card[]) => void;
}

const PlayerHand: React.FC<PlayerHandProps> = ({ onNextStep, onSetHand }) => {
  const [deck, setDeck] = useState<Deck>(new Deck());
  const [selectedCards, setSelectedCards] = useState<Deck.Card[]>([]);

  useEffect(() => {
    // Initialize or reshuffle the deck as needed
    deck.shuffle();
  }, [deck]);

  // Function to select a card
  const selectCard = (card: Deck.Card) => {
    if (selectedCards.length < 4 && !selectedCards.includes(card)) {
      setSelectedCards([...selectedCards, card]);
    }
  };

  // Function to submit the selected hand
  const submitHand = () => {
    if (selectedCards.length === 4) {
      onSetHand(selectedCards);
      onNextStep();
    } else {
      alert('Please select exactly 4 cards.');
    }
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>Select Your Hand</h2>
      <div className={styles.handSelection}>
        {deck.cards.slice(0, 12).map((card, index) => (
          <div key={index} onClick={() => selectCard(card)} className={styles.cardOption}>
            {card.rank} of {card.suit}
          </div>
        ))}
      </div>
      <button onClick={submitHand} className={styles.submitButton}>Submit Hand</button>
    </div>
  );
};

export default PlayerHand;

  -------------------

// src/components/ScoreResult/ScoreResult.tsx

import React from 'react';
import styles from './ScoreResult.module.css';
import { Card as CardType } from 'card-games-typescript';

interface ScoreBreakdown {
  fifteens: number;
  pairs: number;
  runs: number;
  flush: number;
  nobs: number;
  total: number;
}

interface ScoreResultProps {
  hand: CardType[];
  crib: CardType[]; // Optional, depending on game state
  starter: CardType;
  scoreBreakdown: ScoreBreakdown;
  onReset: () => void; // Function to reset the game or proceed to the next hand/round
}

const ScoreResult: React.FC<ScoreResultProps> = ({ hand, crib, starter, scoreBreakdown, onReset }) => {
  return (
    <div className={styles.container}>
      <h2 className={styles.title}>Scoring Results</h2>
      <div className={styles.scoreDetails}>
        <div className={styles.detailItem}>Fifteens: {scoreBreakdown.fifteens} points</div>
        <div className={styles.detailItem}>Pairs: {scoreBreakdown.pairs} points</div>
        <div className={styles.detailItem}>Runs: {scoreBreakdown.runs} points</div>
        <div className={styles.detailItem}>Flush: {scoreBreakdown.flush} points</div>
        <div className={styles.detailItem}>Nobs: {scoreBreakdown.nobs} points</div>
        <div className={styles.detailItem}><strong>Total Score: {scoreBreakdown.total} points</strong></div>
      </div>
      <button className={styles.resetButton} onClick={onReset}>Reset Game</button>
    </div>
  );
};

export default ScoreResult;

  -------------------

// utils/scoringLogic.ts

// Define a type for a card to ensure consistency across the application
type Suit = 'Hearts' | 'Diamonds' | 'Clubs' | 'Spades';
type Rank = 'A' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'J' | 'Q' | 'K';

interface Card {
  rank: Rank;
  suit: Suit;
}

// Define a type for a hand, which is an array of cards, plus the starter card
interface Hand {
  cards: Card[];
  starter: Card;
}

// Convert Rank to numerical value for scoring
const rankToPoints = (rank: Rank): number => {
  switch (rank) {
    case 'A':
      return 1;
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case '10':
      return parseInt(rank);
    case 'J':
    case 'Q':
    case 'K':
      return 10;
    default:
      throw new Error(`Unknown rank: ${rank}`);
  }
};

// Helper function to generate all combinations of cards
function* combinations<T>(array: T[], length: number, startIndex = 0, currentCombination: T[] = []): Generator<T[]> {
  if (length === 0) {
    yield currentCombination;
    return;
  }
  for (let i = startIndex; i <= array.length - length; i++) {
    yield* combinations(array, length - 1, i + 1, [...currentCombination, array[i]]);
  }
}

// Calculate score from combinations summing to fifteen
const scoreFifteens = ({ cards, starter }: Hand): number => {
  let count = 0;
  const allCards = [...cards, starter];
  for (let i = 2; i <= allCards.length; i++) {
    for (const combo of combinations(allCards, i)) {
      const sum = combo.reduce((acc, card) => acc + rankToPoints(card.rank), 0);
      if (sum === 15) {
        count += 2;
      }
    }
  }
  return count;
};

// Calculate score from pairs, three of a kind, and four of a kind
const scorePairs = ({ cards, starter }: Hand): number => {
  let count = 0;
  const allCards = [...cards, starter];
  const seen: Record<string, number> = {};
  allCards.forEach(card => {
    seen[card.rank] = (seen[card.rank] || 0) + 1;
  });
  Object.values(seen).forEach(value => {
    if (value >= 2) {
      count += value * (value - 1); // n * (n-1) for pairs, accounting for multiples
    }
  });
  return count;
};

// Calculate score from runs of three or more consecutive cards
const scoreRuns = ({ cards, starter }: Hand): number => {
  let totalScore = 0;
  const allCards = [...cards, starter].map(card => rankToPoints(card.rank));
  allCards.sort((a, b) => a - b);

  for (let start = 0; start < allCards.length; ++start) {
    for (let end = start + 2; end < allCards.length; ++end) {
      if (allCards[end] - allCards[start] === end - start) {
        // Found a run
        let runLength = end - start + 1;
        let runScore = 1;

        // Count duplicates to handle runs with pairs, three of a kind, etc.
        let duplicatesCount = {};
        for (let i = start; i <= end; ++i) {
          duplicatesCount[allCards[i]] = (duplicatesCount[allCards[i]] || 0) + 1;
        }

        // Calculate run score considering duplicates
        runScore = Object.values(duplicatesCount).reduce((acc, count) => acc * count, runScore);

        // Update total score
        totalScore += runScore * runLength;
        break; // Break after counting a run to avoid double counting
      }
    }
  }

  return totalScore;
};


// Calculate score from flushes in the hand and/or the crib
const scoreFlush = ({ cards, starter }: Hand, isCrib: boolean): number => {
  if (cards.every(card => card.suit === cards[0].suit)) {
    return isCrib && starter.suit !== cards[0].suit ? 0 : cards.length + (starter.suit === cards[0].suit ? 1 : 0);
  }
  return 0;
};

// Calculate score for having the jack of the same suit as the starter card (Nobs)
const scoreNobs = ({ cards, starter }: Hand): number => {
  return cards.some(card => card.rank === 'J' && card.suit === starter.suit) ? 1 : 0;
};

export const calculateHandScore = (hand: Hand, isCrib: boolean = false): number => {
  return scoreFifteens(hand) + scorePairs(hand) + scoreRuns(hand) + scoreFlush(hand, isCrib) + scoreNobs(hand);
};
